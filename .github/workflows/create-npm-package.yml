name: Publish NPM Package
run-name: Publish NPM Package for ${{ inputs.base_folder }}

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm i
      - run: npm ci
      - run: npm test
    
  publish-gpr:
    name: Publish GitHub Package ${{ inputs.base_folder }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
          scope: '@regestaitalia'
      - name: Read product version
        id: read_name
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "package.json"
          prop_path: "name"
      - name: Read product version
        id: read_version
        uses: ActionsTools/read-json-action@main
        with:
          file_path: "package.json"
          prop_path: "version"
      - name: Get latest version from npm
        id: get_latest_version
        run: |
          next_version=$(npm view ${{ steps.read_name.outputs.value }} dist-tags.next || echo "")
          if [ -z "$next_version" ]; then
            latest_version=$(npm view ${{ steps.read_name.outputs.value }} dist-tags.latest || echo "")
            echo "latest_version=$latest_version" >> $GITHUB_ENV
          else
            echo "latest_version=$next_version" >> $GITHUB_ENV
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Echo latest version
        run: echo $latest_version
      - run: npm publish --tag next
        if: ${{ steps.read_version.outputs.value != env.latest_version }}
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}